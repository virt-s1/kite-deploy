---
- name: create kickstart file
  template:
    src: rhel-8-esxi-ks-cfg.j2
    dest: "{{ playbook_dir }}/ks.cfg"

- name: create kickstart iso
  command: mkisofs -V "OEMDRV" -o "{{ playbook_dir }}/ks-{{ esxi_firmware }}.iso" "{{ playbook_dir  }}/ks.cfg"

# rhel-boot.iso and fedora-boot.iso are at lctp-image folder ready
# - name: "download {{boot_iso[os]}}"
#   get_url:
#     url: "https://file-server-virt-qe-3rd.cloud.paas.psi.redhat.com/lctp/{{ boot_iso[os] }}"
#     dest: "{{ playbook_dir }}/{{ boot_iso[os] }}"
#     checksum: "sha256:{{ checksum_sha256[os] }}"
#     timeout: 5400
#   register: download_result
#   retries: 3
#   delay: 3
#   until: download_result.status_code == 200

- name: "delete ks-{{ esxi_firmware }}.iso if it exists"
  vsphere_file:
    host: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    path: "ks-{{ esxi_firmware }}.iso"
    state: absent

- name: "upload ks-{{ esxi_firmware }}.iso"
  vsphere_copy:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    src: "{{ playbook_dir }}/ks-{{ esxi_firmware }}.iso"
    path: "ks-{{ esxi_firmware }}.iso"

- name: "install {{ os }}"
  vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    name: "{{ esxi_template }}-vm"
    folder: ""
    state: poweredon
    guest_id: "{{ esxi_guest_id }}"
    esxi_hostname: "{{ esxi_host }}"
    disk:
      - size_gb: 10
        type: thin
        datastore: "{{ esxi_datastore }}"
    hardware:
      num_cpus: "{{ esxi_cpu }}"
      memory_mb: "{{ esxi_memory_mb }}"
      scsi: paravirtual
      boot_firmware: "{{ esxi_firmware }}"
    networks:
      - name: "{{ esxi_network }}"
        device_type: "{{ esxi_nic_type }}"
        start_connected: true
        type: dhcp
    cdrom:
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 0
        type: iso
        iso_path: "[{{ esxi_datastore }}] lctp-image/{{ boot_iso[os] }}"
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 1
        type: iso
        iso_path: "[{{ esxi_datastore }}] ks-{{ esxi_firmware }}.iso"
    wait_for_ip_address: yes
  register: new_guest

- name: get uuid and make it a variable
  set_fact:
    hw_uuid: "{{ new_guest.instance.hw_product_uuid  }}"

- name: in case no ip address assigned or stuck at mount
  block:
    # The 'vmware_guest_facts' module has been renamed to 'vmware_guest_info'
    # This feature will be removed in version 2.13
    - name: wait for ip _really_ being available
      vmware_guest_info:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        uuid: "{{ hw_uuid }}"
      register: facts
      until: facts.instance.ipv4 is not none
      retries: 30
      delay: 1
  rescue:
    - name: poweroff guest
      vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        uuid: "{{ hw_uuid }}"
        state: poweredoff
        state_change_timeout: 120
    - name: start guest
      vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        uuid: "{{ hw_uuid }}"
        state: poweredon
        state_change_timeout: 120
    - name: wait for ip _really_ being available
      vmware_guest_info:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ datacenter }}"
        uuid: "{{ hw_uuid }}"
      register: facts
      until: facts.instance.ipv4 is not none
      retries: 30
      delay: 1

- name: waits until instance is reachable
  wait_for:
    host: "{{ new_guest.instance.ipv4 }}"
    port: 22
    search_regex: OpenSSH
    delay: 10
    timeout: 1800

- name: guest smoking test
  vmware_vm_shell:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    vm_id: "{{ hw_uuid }}"
    vm_id_type: uuid
    vm_username: "{{ esxi_guest_username }}"
    vm_password: "{{ esxi_guest_password }}"
    vm_shell: /usr/bin/cat
    vm_shell_args: /etc/redhat-release
    wait_for_process: yes
  register: shell_command_output
  failed_when: shell_command_output.exit_code != 0

- name: shut down guest
  vmware_guest_powerstate:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    uuid: "{{ hw_uuid }}"
    state: shutdown-guest
    state_change_timeout: 200

- name: remove two cdroms before making template
  vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    uuid: "{{ hw_uuid }}"
    cdrom:
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 0
        state: absent
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 1
        state: absent

- name: remove current template
  vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    name: "{{ esxi_template }}"
    is_template: yes
    state: absent

- name: convert to template
  vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    uuid: "{{ hw_uuid }}"
    name: "{{ esxi_template }}"
    is_template: yes

- name: "clean up ks-{{ esxi_firmware }}.iso finally"
  vsphere_file:
    host: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    path: "ks-{{ esxi_firmware }}.iso"
    state: absent
