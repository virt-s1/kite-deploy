---
- name: random number for unique instance name
  set_fact:
    tmp_num: "{{ 9999 | random(start=1001) }}"

- name: random number for instance type
  set_fact:
    instance_type_index: "{{ 3 | random(start=0) }}"

- name: set random instance type
  set_fact:
    random_instance_type: "{{ lookup('env', 'INSTANCE_TYPE') | default(instance_type[instance_type_index], true) }}"

- name: save random instance type to a file for umb
  copy:
    content: "{{ random_instance_type }}"
    dest: "aws_instance_type"

- name: get all availability zones
  amazon.aws.aws_az_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
  register: ec2_zones

- name: create VPC
  amazon.aws.ec2_vpc_net:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite.guest"
    cidr_block: "172.32.0.0/16"
    tags:
      kite: "kite.guest"
  register: ec2_vpc

- name: add internet gateway for VPC
  amazon.aws.ec2_vpc_igw:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    tags:
      kite: "kite.guest"
  register: ec2_vpc_igw

- name: "create subnet for VPC in {{ ec2_zones.availability_zones[0] }}"
  amazon.aws.ec2_vpc_subnet:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    cidr: "172.32.32.0/24"
    az: "{{ ec2_zones.availability_zones[-2].zone_name }}"
    tags:
      kite: "kite.guest"
  register: ec2_vpc_subnet

- name: add default route in route table for all vpc subnets
  amazon.aws.ec2_vpc_route_table:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    subnets:
      - "{{ ec2_vpc_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ ec2_vpc_igw.gateway_id }}"
    tags:
      kite: "kite.guest"
  register: ec2_vpc_route_table

- name: create security group
  amazon.aws.ec2_group:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    name: "kite.guest"
    description: kite security group
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0
    tags:
      kite: "kite.guest"
      name: "kite.guest"
  register: ec2_security_group

- name: config ssh keypair used by test
  amazon.aws.ec2_key:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite.guest.{{ os }}.{{ arch }}"
    key_material: "{{ lookup('file', 'key/identity.pub')  }}"

- name: set ami id key
  set_fact:
    ami_id_key: "kite-image-{{ os }}-{{ arch }}"

- name: set tag name
  set_fact:
    instance_tag: "kite.guest.{{ random_instance_type }}.{{ os }}.{{ arch }}.{{ lookup('env', 'GITHUB_SHA')[:9] | default(tmp_num, true) }}"

- name: generate ec2_run_instance script
  template:
    src: ec2_run_instance.j2
    dest: "{{ playbook_dir }}/ec2_run_instance.sh"
    mode: 0755

- name: run ec2 instance with script
  command: "{{ playbook_dir }}/ec2_run_instance.sh"
  register: result_instance

- name: convert run_instance output to json
  set_fact:
    instance_json: "{{ result_instance.stdout | from_json }}"

- name: wait for instance running
  shell: aws ec2 describe-instances --instance-ids {{ instance_json.Instances[0].InstanceId }} | jq -r '.Reservations[0].Instances[0].State.Name'
  register: describe_result
  retries: 60
  delay: 5
  until: describe_result.stdout == "running"

- name: get instance public ip
  shell: aws ec2 describe-instances --instance-ids {{ instance_json.Instances[0].InstanceId }} | jq -r '.Reservations[0].Instances[0].PublicIpAddress'
  register: ip_result

- name: set instance public ip
  set_fact:
    public_ip: "{{ ip_result.stdout }}"

- name: waits until ssh is reachable
  wait_for:
    host: "{{ public_ip }}"
    port: 22
    search_regex: OpenSSH
    delay: 10
    sleep: 5
    timeout: 600

- name: add guest ip into host guest group
  add_host:
    name: "{{ public_ip  }}"
    groups: guest

- name: keep private key permission to 600
  file:
    path: "{{ playbook_dir }}/key/identity"
    mode: "0600"

- name: ensure cloud-init has finished
  raw: test -f /var/lib/cloud/instance/boot-finished
  retries: 60
  register: cloud_init_check
  changed_when: false
  until: cloud_init_check is success
  delegate_to: "{{ public_ip }}"

- name: write guest info to inventory file
  community.general.ini_file:
    path: "{{ playbook_dir }}/inventory"
    section: cloud:vars
    option: guest_ip
    value: "{{ public_ip }}"
    no_extra_spaces: yes

- name: write guest info to inventory file
  community.general.ini_file:
    path: "{{ playbook_dir }}/inventory"
    section: cloud:vars
    option: instance
    value: "{{ instance_json.Instances[0].InstanceId }}"
    no_extra_spaces: yes

# Do not delete security group, so don't need group id any more
