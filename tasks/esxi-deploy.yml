---
- name: random number for unique instance name
  set_fact:
    tmp_num: "{{ 999 | random(start=101) }}"

- name: "clone vm from template {{ esxi_template }} on {{ esxi_host }}"
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    name: "kite-{{ os }}-{{ esxi_firmware }}-{{ lookup('env', 'PIPELINE_ID') | default(tmp_num, true) }}"
    folder: ""
    state: poweredon
    template: "{{ esxi_template }}"
    disk:
      - size_gb: "{{ esxi_disk_gb }}"
        type: thin
        datastore: "{{ esxi_datastore }}"
    hardware:
      num_cpus: "{{ esxi_cpu }}"
      hotadd_cpu: True
      hotremove_cpu: True
      memory_mb: "{{ esxi_memory_mb }}"
      hotadd_memory: True
      scsi: paravirtual
      boot_firmware: "{{ esxi_firmware }}"
    networks:
      - name: "{{ esxi_network }}"
        device_type: "{{ esxi_nic_type }}"
        start_connected: true
        type: dhcp
    wait_for_ip_address: yes
  register: new_guest

- name: get uuid and make it a variable
  set_fact:
    hw_uuid: "{{ new_guest.instance.hw_product_uuid }}"

- name: in case no ip address assigned or stuck at mount
  block:
    # The 'vmware_guest_facts' module has been renamed to 'vmware_guest_info'
    # This feature will be removed in version 2.13
    - name: wait for ip _really_ being available
      community.vmware.vmware_guest_info:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        uuid: "{{ hw_uuid }}"
      register: facts
      until: facts.instance.ipv4 is not none
      retries: 30
      delay: 1
  rescue:
    - name: poweroff guest
      community.vmware.vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        uuid: "{{ hw_uuid }}"
        state: poweredoff
        state_change_timeout: 120
    - name: start guest
      community.vmware.vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        uuid: "{{ hw_uuid }}"
        state: poweredon
        state_change_timeout: 120
    - name: wait for ip _really_ being available
      community.vmware.vmware_guest_info:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        uuid: "{{ hw_uuid }}"
      register: facts
      until: facts.instance.ipv4 is not none
      retries: 30
      delay: 1

- name: waits until instance is reachable
  wait_for:
    host: "{{ new_guest.instance.ipv4 }}"
    port: 22
    search_regex: OpenSSH
    delay: 10
    timeout: 1800

- name: add instance to guest group
  add_host:
    name: "{{ new_guest.instance.ipv4 }}"
    group: guest

- name: keep private key permission to 600
  file:
    path: "{{ playbook_dir }}/key/identity"
    mode: "0600"

- name: ensure cloud-init has finished
  raw: test -f /var/lib/cloud/instance/boot-finished
  retries: 60
  register: cloud_init_check
  changed_when: false
  until: cloud_init_check is success
  delegate_to: "{{ new_guest.instance.ipv4 }}"

- name: create a snapshot
  community.vmware.vmware_guest_snapshot:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"
    state: present
    snapshot_name: "{{ esxi_snapshot_name }}"
    description: "snapshot for {{ os }} {{ esxi_firmware }}"

- name: write guest info to inventory file
  community.general.ini_file:
    path: "{{ playbook_dir }}/inventory"
    section: cloud:vars
    option: guest_ip
    value: "{{ facts.instance.ipv4 }}"
    no_extra_spaces: yes

- name: write guest info to inventory file
  community.general.ini_file:
    path: "{{ playbook_dir }}/inventory"
    section: cloud:vars
    option: instance
    value: "{{ hw_uuid }}"
    no_extra_spaces: yes
